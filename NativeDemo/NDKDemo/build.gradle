plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        // 安装了多个版本的 NDK，想要使用某个特定版本，如下配置
        // ndkVersion "22.1.7171670" // ndkVersion "major.minor.build" e.g.,  ndkVersion '21.3.6528147'

        // This block is different from the one you use to link Gradle
        // to your CMake or ndk-build script.
        externalNativeBuild {

            // For ndk-build, instead use the ndkBuild block.
            cmake {

                // Passes optional arguments to CMake.
                arguments "-DANDROID_STL=c++_shared" // 为了编译出libc++_shared.so

                // Sets a flag to enable format macro constants for the C compiler.
                cFlags "-D__STDC_FORMAT_MACROS"

                // Sets optional flags for the C++ compiler.
                cppFlags "-fexceptions", "-frtti"

                // 构建指定abi的so文件（如果不指定会根据默认abi构建，默认有armeabi-v7a、arm64-v8a、x86、x86_64）
                abiFilters /*'armeabi-v7a', */'arm64-v8a'/*, 'x86', 'x86_64'*/
            }
            // or ndkBuild {...}
        }

        // 该模块中的abiFilters管理gradle对指定abi的构建和打包。
        // 注意: 该模块配置的含义分当前build.gradle是属于app和module两种情况
        // 属于app: ndk中abiFilters配置表示对指定abi构建和打包，会覆盖上面cmake中abiFilters的配置。
        // 属于module分两种情况:
        //      被app依赖: ndk中abiFilters配置表示对指定abi构建，会覆盖上面cmake中abiFilters的配置。（要配置打包指定abi需要在app中配置该模块）
        //      打包aar: ndk中abiFilters配置表示对指定abi构建，会与上面cmake中abiFilters的配置取并集，如果无并集会编译不过，最终在aar中存在的so是构建生成和module本身存在的集合。
        // 总结: 如果该文件属于app，就配置该模块，不用配置上面cmake中abiFilters；如果该文件属于module，就不配置该模块，用上面cmake中abiFilters代替；
//        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
//            abiFilters 'armeabi-v7a'//, 'arm64-v8a', 'x86', 'x86_64'
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            jni.srcDirs = []
            // gradle 插件在4.0及以后，如果该配置的值为src/main/jniLibs，那么不再需要该配置，因为会将src/main/jniLibs中预构建依赖项自动打包到aar和apk中
//            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    // Use this block to link Gradle to your CMake or ndk-build script.
    // Encapsulates your external native build configurations.
    externalNativeBuild { // 编译ndk: 配置：open 注释：close

        // Encapsulates your CMake build configurations.
        cmake { // 设置cmake编译脚本，配置CMakeLists.txt路径

            // Provides a relative path to your CMake build script.
            path "src/main/cpp/CMakeLists.txt"

            // 未设置特定 CMake 版本的项目使用 CMake 3.10.2 进行构建。
            version "3.18.1"
        }
        // or ndkBuild {...}
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}