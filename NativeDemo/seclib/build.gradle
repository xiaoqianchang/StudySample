plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // 安装了多个版本的 NDK，想要使用某个特定版本，如下配置
        // ndkVersion "22.1.7171670" // ndkVersion "major.minor.build" e.g.,  ndkVersion '21.3.6528147'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

//        externalNativeBuild {
//            ndkBuild {
//
//                // 构建指定abi的so文件（如果不指定会根据默认abi构建，默认有armeabi-v7a、arm64-v8a、x86、x86_64）
//                abiFilters /*'armeabi-v7a', */'arm64-v8a'/*, 'x86', 'x86_64'*/
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            // 引入so（如果ndk编译关闭，需要将之前编译生成的so放到libs并打开该配置）
            // jniLibs.srcDirs = ['libs']
            // 禁止ndk自动编译
            // 编译ndk，注释掉
            jni.srcDirs = []
        }
    }
    // 编译ndk，打开
    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}